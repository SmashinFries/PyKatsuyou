# -*- coding: utf-8 -*-

from pandas.core.frame import DataFrame
from igo.tagger import Tagger
from jaconv import kata2hira
from .godan import Godan
from .ichidan import Ichidan
from .iAdj import IAdj
from .irregulars import IrregularVerb

def getInflections(text: str, jsonIndent: int = 0, dataframe:bool = False):
    """
    Get the inflections of a verb or adjective.

    Parameters
    ----------
    text : string, required
        Requires dictionary form. Using only hiragana may provide inaccurate results.

    jsonIndent : int, default 0
        Indentation length of the JSON output. Default is 0.

    dataframe : bool, default False
        Whether or not to return a dataframe instead of object

    Returns
    -------
    An object containing JSON/List or a dataframe

    Example
    -------

    >>> result = getInflections('Ë°å„Åè', dataframe:True)
    >>> print(tabulate(result, headers='keys', tablefmt='pretty'))

    """
    
    # Too many if statements?üòÖ

    PAIRS = {
    # V     V    ka    ga    sa    za  „ÄÄta    da    na    ha    ba    ma    ya   ra    wa
    '„ÅÇ': ['„ÅÇ', '„Åã', '„Åå', '„Åï', '„Åñ', '„Åü', '„Å†', '„Å™', '„ÅØ', '„Å∞', '„Åæ', '„ÇÑ', '„Çâ', '„Çè'], 
    '„ÅÑ': ['„ÅÑ', '„Åç', '„Åé', '„Åó', '„Åò', '„Å°', '„Å¢', '„Å´', '„Å≤', '„Å≥', '„Åø', '„Éº', '„Çä', '„Éº'], 
    '„ÅÜ': ['„ÅÜ', '„Åè', '„Åê', '„Åô', '„Åö', '„Å§', '„Å•', '„Å¨', '„Åµ', '„Å∂', '„ÇÄ', '„ÇÜ', '„Çã', '„Éº'], 
    '„Åà': ['„Åà', '„Åë', '„Åí', '„Åõ', '„Åú', '„Å¶', '„Åß', '„Å≠', '„Å∏', '„Åπ', '„ÇÅ', '„Éº', '„Çå', '„Éº'],
    '„Åä': ['„Åä', '„Åì', '„Åî', '„Åù', '„Åû', '„Å®', '„Å©', '„ÅÆ', '„Åª', '„Åº', '„ÇÇ', '„Çà', '„Çç', '„Çí'],
    }
    EXCEPTIONS = ['ÂÖ•„Çã', 'Ëµ∞„Çã', 'Ë¶Å„Çã', 'Â∏∞„Çã', 'Èôê„Çã', 'Âàá„Çã', 'Âñã„Çã', 'Áü•„Çã', 'Êπø„Çã', '„Åó„ÇÉ„Åπ„Çã', 'Ê∏õ„Çã', 'ÁÑ¶„Çã', 'Ëπ¥„Çã', 'Êªë„Çã', 'Êè°„Çã', 'Á∑¥„Çã', 'ÂèÇ„Çã', '‰∫§„Åò„Çã', 'Âò≤„Çã', 'Ë¶Ü„Çã', 'ÈÅÆ„Çã', 'ÁΩµ„Çã', 'Êçª„Çã', 'Áøª„Çã', 'ÊªÖÂÖ•„Çã', 'Ëòá„Çã']
    IRREGULARS = ['„Åô„Çã', 'ÁÇ∫„Çã', '„Åè„Çã', 'Êù•„Çã']

    tt = Tagger()
    check = tt.parse(text)
    temp = check[-1].feature.split(',')
    hira = kata2hira(temp[-1])
    
    go = Godan(hira)
    ichi = Ichidan()
    iadj = IAdj()
    irreg = IrregularVerb()
    data: DataFrame = {}

    def isVerb() -> bool:
        if 'ÂãïË©û' in check[-1].feature:
            return True
        else:
            return False

    def isAdj() -> bool:
        check = tt.parse(text)
        if 'ÂΩ¢ÂÆπË©û' in check[-1].feature:
            return True
        else:
            return False

    def ruDecider3000():
        if (hira[-2] in PAIRS['„ÅÇ']) or (hira[-2] in PAIRS['„ÅÜ']) or (hira[-2] in PAIRS['„Åä'] or (text in EXCEPTIONS)):
            # It is GODAN
            result = go.getForms(text)
            return result
        elif (hira[-2] in PAIRS['„ÅÑ'] or hira[-2] in PAIRS['„Åà'] and text not in EXCEPTIONS):
            # It is ICHIDAN
            result = ichi.getForms(text)
            return result
        else:
            print('Failed:', hira[-2])

    def finalizeVerb(data):
        # Get Data
        if text not in IRREGULARS:
            if text[-1] == '„Çã':
                data = ruDecider3000()
            else:
                result = go.getForms(text)
                data = result
        else:
            data = irreg.getForms(text)
            pass
        
        # Finalize
        if dataframe:
            return data
        else:
            dataArr = []
            for item in list(data['Affirmative'].values[1:]):
                dataArr.append(item)
            for item in list(data['Negative'].values[1:]):
                if item == 'ÔΩò':
                    pass
                else:
                    dataArr.append(item)
            return {'json': data.to_json(force_ascii=False, indent=jsonIndent), 'list': dataArr}

    def finalizeAdj(data):
        result = iadj.getForms(text)
        data = result

        if dataframe:
            return data
        else:
            dataArr = []
            for item in list(data['Affirmative'].values[1:]):
                dataArr.append(item)
            for item in list(data['Negative'].values[1:]):
                if item == 'ÔΩò':
                    pass
                else:
                    dataArr.append(item)
            return {'json': data.to_json(force_ascii=False, indent=jsonIndent), 'list': dataArr}

    if isVerb():
        final = finalizeVerb(data)
        return final
    elif isAdj():
        final = finalizeAdj(data)
        return final
    else:
        return {'json': '‚ìß', 'list': ['Not a verb/adjective']}
